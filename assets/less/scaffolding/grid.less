// ==========================================================================
// Grid
// ==========================================================================

// Containers
// -----------------------------------------------
body {
    min-width: @body-min-width;
}
.container,
.container--fluid {
    padding-left: @container-gutter-width;
    padding-right: @container-gutter-width;
}
.container {
    max-width: @container-max-width;
    margin-right: auto;
    margin-left: auto;
}

// Grid
// -----------------------------------------------
// Calculate column width
.col-width(@columns) {
    @column: (100 / ((100 / @grid-columns) * @columns));
    @width: (100 - (@grid-gutter-width * (@column - 1))) / @column;    
}

// Generate columns
.colX(@index) when (@index > 0) {
    .col@{index} { 
        .col-width(@index);
        width: @width; 
    }
    .colX(@index - 1);
}
.colX(0) {}

// Pull columns over
.pullX(@index) when (@index > 0) {
    .col-width(@index);

    &.pull@{index} { 
        //.pull(@index); 
        margin-left: @width + (@grid-gutter-width * 2);

        &:first-child {
            margin-left: @width + @grid-gutter-width;
        }
    }
    .pullX(@index - 1);
}
.pullX(0) {}

@media (min-width: @bp-grid) {
    // Generate columns
    .colX(@grid-columns);
    
    // Setup the rows
    .row { 
        .clearfix();

        & > [class^="col"] {
        	float: left;
            margin-left: @grid-gutter-width;
        
            // First child has no margin, or first in row
            &:first-child {
            	margin-left: 0;
            }

            // Pull a column
            .pullX(@grid-columns);
        }
    }
}